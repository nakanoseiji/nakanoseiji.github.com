<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[なかのログ]]></title>
  <link href="http://nakanoseiji.github.com/atom.xml" rel="self"/>
  <link href="http://nakanoseiji.github.com/"/>
  <updated>2013-05-27T01:15:26+09:00</updated>
  <id>http://nakanoseiji.github.com/</id>
  <author>
    <name><![CDATA[nakanoseiji]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Redis の Pub/Sub を使う]]></title>
    <link href="http://nakanoseiji.github.com/blog/2013/05/26/redis-pubsub/"/>
    <updated>2013-05-26T18:10:00+09:00</updated>
    <id>http://nakanoseiji.github.com/blog/2013/05/26/redis-pubsub</id>
    <content type="html"><![CDATA[<h1>なにそれ？</h1>

<p>Publisher(Sender) は誰が購読しているかを意識することなくデータを送信し、
Subscriber は Publisher から配信されるデータのうち、自分が欲しいものだけを受信できる機能です。</p>

<p>何に使えるのか？を考えるためにも、ちょっと触ってみます。</p>

<h1>構成</h1>

<p>とりあえず以下のような構成にしてみます。機材は Raspberry Pi で、OS に Fedora18 をインストールしています。</p>

<ul>
<li>master * 1</li>
<li>slave * 2 (slave1, slave2)</li>
</ul>


<h1>触ってみる</h1>

<p>公式のドキュメントを見てもいまいちしっくりこないので、まずは使ってみます。
まずは master, slave それぞれに telnet で接続します。</p>

<p>次に、slave1 で以下を打ち込んで、ch_1 を受信できるようにします。ちなみにチャンネルはスペースで区切って複数指定出来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SUBSCRIBE ch_1</span></code></pre></td></tr></table></div></figure>


<p>一方、slave_2 では以下のようにして、別のチャンネルを受信します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SUBSCRIBE ch_2</span></code></pre></td></tr></table></div></figure>


<p>次に、master で以下を実行してみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PUBLISH ch_1 Hello,ch_1</span></code></pre></td></tr></table></div></figure>


<p>すると、slave1 につないだターミナルで以下のデータが受信されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*3
</span><span class='line'>$7
</span><span class='line'>message
</span><span class='line'>$4
</span><span class='line'>ch_1
</span><span class='line'>$10
</span><span class='line'>Hello,ch_1</span></code></pre></td></tr></table></div></figure>


<p>次に master で以下を実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PUBLISH ch_2 Hello,ch_2</span></code></pre></td></tr></table></div></figure>


<p>slave2 に接続した端末にデータが流れて来ました。slave1 のほうには何も出ません。</p>

<p>また、受信したいチャンネルをワイルドカードで指定できる PSUBSCRIBE があります。</p>

<p>受信側が</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PSUBSCRIBE hoge*</span></code></pre></td></tr></table></div></figure>


<p>としていれば、以下の配信内容のどちらも受信することができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PUBLISH hogefuga 111111
</span><span class='line'>PUBLISH hogepiyo 222222</span></code></pre></td></tr></table></div></figure>


<p>`</p>

<p>実際には公式のドキュメントにあるように、ドットで名前空間的に区切るような運用が好ましいと思います。</p>

<p>なお、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PSUBSCRIBE *</span></code></pre></td></tr></table></div></figure>


<p>とすれば PUBLISH されたすべてを受信できます。</p>

<h1>検証</h1>

<p>実際にどういう構成をとりえるのか、ちょっと検証してみる。</p>

<h2>master で Subscribe はできるのか？</h2>

<p>master で 以下を実行してみる</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SUBSCRIBE ch_master
</span><span class='line'>PUBLISH ch_master Hello,Master</span></code></pre></td></tr></table></div></figure>


<p>すると、以下の様なメッセージが帰って来ました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-ERR only (P)SUBSCRIBE / (P)UNSUBSCRIBE / QUIT allowed in this context</span></code></pre></td></tr></table></div></figure>


<p>どうやら SUBSCRIBE している 接続 ではそれ専用になるようです。</p>

<p>もう一つ telnet を起動して、master に接続してみて以下を実行します。もともと接続している方は SUBSCRIBE したままです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>PUBLISH ch_master Hello,Master</span></code></pre></td></tr></table></div></figure>


<p>すると予想通り master で SUBSCRIBE した接続に以下のデータが返って来ました。
つまり、SUBSCRIBER として接続したとき、その接続は受信専用ということになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>*3
</span><span class='line'>$7
</span><span class='line'>message
</span><span class='line'>$9
</span><span class='line'>ch_master
</span><span class='line'>$12
</span><span class='line'>Hello,Master</span></code></pre></td></tr></table></div></figure>


<h2>過去の配信内容を SUBSCRIBE できる？</h2>

<p>当たり前に考えてできないはずです。が、念のため確認してみます。</p>

<p>slave1 に別の telnet を起動して接続し、ch_1 を SUBSCRIBE してみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SUBSCRIBE ch_1</span></code></pre></td></tr></table></div></figure>


<p>当然ながら、過去に PUBLISH したデータは流れて来ません。</p>

<p>ついでに master でたくさん PUBLISH で発行した後に、保存させてみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SAVE</span></code></pre></td></tr></table></div></figure>


<p>データファイルのサイズは変わりませんでした。保存する必要はないので当然ですね。</p>

<h2>受信可能チャンネル数</h2>

<p>ためしに ch1 から ch1000 までの 1000チャンネルを SUBSCRIBE してみます。</p>

<p>ちゃんと受信できました。</p>

<h2>slave から配信できるか</h2>

<p>master および slave1,2 にそれぞれ telnet 接続して <em>SUBSCRIBE hoge</em> しておきます。
それと別に slave1 に接続した端末から、hoge チャンネルに PUBLISH します。</p>

<p>当たり前ですが、受信ができたのは同じ slave1 に接続している端末でした。</p>

<h2>というわけで</h2>

<p>すでにストレージではない気もしますが、面白いと思います。</p>

<p>どういう用途に使おうか悩ましいところ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, ArchLinux!]]></title>
    <link href="http://nakanoseiji.github.com/blog/2013/04/07/helloarchlinux/"/>
    <updated>2013-04-07T22:54:00+09:00</updated>
    <id>http://nakanoseiji.github.com/blog/2013/04/07/helloarchlinux</id>
    <content type="html"><![CDATA[<h1>ArchLinux を触り始めたメモ</h1>

<h2>eth0 の設定ファイル</h2>

<p>RedHat 系では /etc/sysconfig/network-script/ にあるもの。
arch だと /etc/network.d 下にあります。</p>

<h2>ネットワークの再起動</h2>

<p>arch だと init デーモンではなく systemd が採用されていて</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>systemctl restart netcfg@ethernet-eth0</span></code></pre></td></tr></table></div></figure>


<p>で新しい設定ファイルの内容でネットワークが起動しました。</p>

<p>ちなみに、systemctl &#8211;help でどんなことができるかひと通り見れるようです。</p>

<h2>ホスト名の変更</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hostnamectl set-hostname new_hostname</span></code></pre></td></tr></table></div></figure>


<p>コマンドを実行すると、/etc/hostname ファイルも書き換わります。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, Raspberry Pi!]]></title>
    <link href="http://nakanoseiji.github.com/blog/2013/04/07/hello/"/>
    <updated>2013-04-07T00:19:00+09:00</updated>
    <id>http://nakanoseiji.github.com/blog/2013/04/07/hello</id>
    <content type="html"><![CDATA[<h1>注文から到着まで</h1>

<p>オンラインで注文とPayPalで決済して、ほぼ書いてあった納期通り到着しました。</p>

<p>TypeB を10個と、そのクリアケースを10個。
日本郵政の方が配達してくれて、受け取り時に関税が1,200円かかりました。</p>

<h1>その他の買い物</h1>

<p>たしかに本体だけで見るととても安いのですが、少なくともSDカードと電源となるUSBケーブルが必要です。</p>

<p>とはいえ、それだけだと何もできないため、今回は以下のものを追加で Amazon でポチりました。</p>

<ul>
<li>LAN ケーブル</li>
<li>MicroUSB ケーブル</li>
<li>SD カード</li>
<li>USB 充電器</li>
</ul>


<p>充電器はアンペア数を気をつけないといけません。</p>

<h1>下準備</h1>

<p>Raspberry Pi 用の OS イメージを、予め SD カードに書き込んでおく必要があります。</p>

<p>GUI ツールもありますが、MacOSX の場合は dd コマンドでダウンロードしたイメージを書き込めます。
今回は一度も使ったことがなかったので ArchLinux を選びました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ diskutil unmountDisk disk1 # SD カードが disk1 の場合
</span><span class='line'>$ sudo dd bs=1m if=/path/to/archlinux-hf-2013-02-11.img of=/dev/disk1</span></code></pre></td></tr></table></div></figure>


<h1>起動 〜 rootfs 拡張</h1>

<p>SD カードを挿して、USB ケーブルに通電すればそれがスイッチ ON となるようです。</p>

<p>ArchLinux の場合は GUI ではなく、CUI でのログインになります。OS イメージのダウンロードページにも書いてありますが、ArchLinux の場合は root/root でログインできます。</p>

<p>この時点で sshd も起動していて PermitRootLogin も許可されているため、単に SSH でログイン出来ればいいような方は LAN ケーブルと SD カードが挿してあれば利用できます。</p>

<p>しかし、ログインして df コマンドの結果を見ると SD カードが空き容量全部利用されてないことがわかります。
なので fdisk コマンドをつかって拡張しましょう。対話モードで以下のような流れになります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@alarmpi ~]# fdisk /dev/mmcblk0
</span><span class='line'>Welcome to fdisk (util-linux 2.22.2).
</span><span class='line'>
</span><span class='line'>Changes will remain in memory only, until you decide to write them.
</span><span class='line'>Be careful before using the write command.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Command (m for help): m
</span><span class='line'>Command action
</span><span class='line'>   a   toggle a bootable flag
</span><span class='line'>   b   edit bsd disklabel
</span><span class='line'>   c   toggle the dos compatibility flag
</span><span class='line'>   d   delete a partition
</span><span class='line'>   l   list known partition types
</span><span class='line'>   m   print this menu
</span><span class='line'>   n   add a new partition
</span><span class='line'>   o   create a new empty DOS partition table
</span><span class='line'>   p   print the partition table
</span><span class='line'>   q   quit without saving changes
</span><span class='line'>   s   create a new empty Sun disklabel
</span><span class='line'>   t   change a partition's system id
</span><span class='line'>   u   change display/entry units
</span><span class='line'>   v   verify the partition table
</span><span class='line'>   w   write table to disk and exit
</span><span class='line'>   x   extra functionality (experts only)
</span><span class='line'>
</span><span class='line'>Command (m for help): d
</span><span class='line'>Partition number (1-4): 2
</span><span class='line'>Partition 2 is deleted
</span><span class='line'>
</span><span class='line'>Command (m for help): n
</span><span class='line'>Partition type:
</span><span class='line'>   p   primary (1 primary, 0 extended, 3 free)
</span><span class='line'>   e   extended
</span><span class='line'>Select (default p): p
</span><span class='line'>Partition number (1-4, default 2): 2
</span><span class='line'>First sector (186368-31268863, default 186368): 
</span><span class='line'>Using default value 186368
</span><span class='line'>Last sector, +sectors or +size{K,M,G} (186368-31268863, default 31268863): 
</span><span class='line'>Using default value 31268863
</span><span class='line'>Partition 2 of type Linux and of size 14.8 GiB is set
</span><span class='line'>
</span><span class='line'>Command (m for help): w
</span><span class='line'>The partition table has been altered!
</span><span class='line'>
</span><span class='line'>Calling ioctl() to re-read partition table.
</span><span class='line'>
</span><span class='line'>WARNING: Re-reading the partition table failed with error 16: Device or resource busy.
</span><span class='line'>The kernel still uses the old table. The new table will be used at
</span><span class='line'>the next reboot or after you run partprobe(8) or kpartx(8)
</span><span class='line'>Syncing disks.</span></code></pre></td></tr></table></div></figure>


<p>ここまで実行したら、いちど再起動します。再起動後、以下を実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[root@alarmpi ~]# resize2fs /dev/mmcblk0p2
</span><span class='line'>resize2fs 1.42.6 (21-Sep-2012)
</span><span class='line'>Filesystem at /dev/mmcblk0p2 is mounted on /; on-line resizing required
</span><span class='line'>old_desc_blocks = 1, new_desc_blocks = 1
</span><span class='line'>The filesystem on /dev/mmcblk0p2 is now 3885312 blocks long.
</span><span class='line'>
</span><span class='line'>[root@alarmpi ~]# df -h
</span><span class='line'>Filesystem      Size  Used Avail Use% Mounted on
</span><span class='line'>rootfs           15G  462M   14G   4% /
</span><span class='line'>/dev/root        15G  462M   14G   4% /
</span><span class='line'>devtmpfs         83M     0   83M   0% /dev
</span><span class='line'>tmpfs           232M     0  232M   0% /dev/shm
</span><span class='line'>tmpfs           232M  240K  231M   1% /run
</span><span class='line'>tmpfs           232M     0  232M   0% /sys/fs/cgroup
</span><span class='line'>tmpfs           232M     0  232M   0% /tmp
</span><span class='line'>/dev/mmcblk0p1   90M   25M   66M  28% /boot</span></code></pre></td></tr></table></div></figure>


<p>これで、16GB の SDカードを目一杯使ってくれるようになりました。</p>

<p>どれくらいのことができるのか、これから試してみよう。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vagrant up でエラーが出た場合]]></title>
    <link href="http://nakanoseiji.github.com/blog/2013/03/19/hello-vagrant/"/>
    <updated>2013-03-19T02:27:00+09:00</updated>
    <id>http://nakanoseiji.github.com/blog/2013/03/19/hello-vagrant</id>
    <content type="html"><![CDATA[<h1>こんなエラーが</h1>

<p>vagrant init をしようとして、こんなエラーが&#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>There was an error executing the following command with VBoxManage:
</span><span class='line'>
</span><span class='line'>["import", "/Users/nakanoseiji/.vagrant.d/boxes/squeeze64/box.ovf"]</span></code></pre></td></tr></table></div></figure>


<p>うちの手元の環境の場合では、以前 VirtualBox を単体で使った時に<em>デフォルトの仮想マシンフォルダー</em>設定を変更していたため起こった模様。</p>

<p>VirtualBox を起動して、上記設定をリセットしてから再度 vagrant init するとちゃんと起動しました。</p>

<p>どこかで指定できるのかもしれませんが。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[chef-solo を試行錯誤中]]></title>
    <link href="http://nakanoseiji.github.com/blog/2013/03/12/hello-chef-solo/"/>
    <updated>2013-03-12T06:34:00+09:00</updated>
    <id>http://nakanoseiji.github.com/blog/2013/03/12/hello-chef-solo</id>
    <content type="html"><![CDATA[<h1>単語とかの整理</h1>

<p>いくつか呼称がでてくるので、予めまとめてみます。訳間違ってるかも。</p>

<ul>
<li>Node

<ul>
<li>chef が設定したりする対象となるもの。とどのつまりサーバ</li>
<li>Role を割り当てることができる</li>
</ul>
</li>
<li>Recipe

<ul>
<li>そんまんま、レシピ</li>
</ul>
</li>
<li>Cookbook

<ul>
<li>レシピ以外にも template やら Attribute を含んだもの</li>
<li>概念的に1クックブックが、apache とか mysqld とかの1つに対応する模様

<ul>
<li> 最初、クックブックにたくさんレシピが入ってると勘違いして混乱してた</li>
</ul>
</li>
</ul>
</li>
<li>Run-list

<ul>
<li>レシピとロールのリスト</li>
<li>順番通りに実行される</li>
</ul>
</li>
<li>Role

<ul>
<li>複数ノード間での共通パターン</li>
<li>0個以上の Attribute と Run-list から構成される</li>
</ul>
</li>
</ul>


<p>このへんの関係が最初分からなくて混乱していた。今思えばそうでもなかった。</p>

<h1>install</h1>

<p>何はともあれインストール。CentOS5.9 の 64bit で試しましたが、どのディストリでも動くかなぁと。別途 git がインストールされていること前提。</p>

<p>あとあと妙なことにならないように、念のため rbenv で環境を作ります。ものがものだけに root ユーザで。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cd ~
</span><span class='line'># git clone git://github.com/sstephenson/rbenv.git .rbenv
</span><span class='line'># echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; .bashrc
</span><span class='line'># echo 'eval "$(rbenv init -)"' &gt;&gt; .bashrc
</span><span class='line'># mkdir -p ~/.rbenv/plugins
</span><span class='line'># cd ~/.rbenv/plugins
</span><span class='line'># git clone git://github.com/sstephenson/ruby-build.git
</span><span class='line'># rbenv install  1.9.2-p320
</span><span class='line'># cd
</span><span class='line'># source .bashrc
</span><span class='line'># rbenv install  1.9.2-p320
</span><span class='line'># rbenv global  1.9.2-p320
</span><span class='line'># rbenv rehash
</span><span class='line'># rbenv which gem
</span><span class='line'># gem install chef
</span><span class='line'># gem install knife-solo</span></code></pre></td></tr></table></div></figure>


<p>これで、<em>chef-solo</em>, <em>knife</em>, <em>knife solo</em> が利用できるようになりました。</p>

<h1>init</h1>

<p>以下のコマンドを実行して、hogehoge ディレクトリにディレクトリ一式と solo.rb を作成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># knife solo init ./hogehoge</span></code></pre></td></tr></table></div></figure>


<p>実行後、hogehoge 内は以下のようになっているはず。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>drwxr-xr-x 2 root root 4096  2月 11 06:32 cookbooks
</span><span class='line'>drwxr-xr-x 2 root root 4096  2月 11 06:32 data_bags
</span><span class='line'>drwxr-xr-x 2 root root 4096  2月 11 06:32 nodes
</span><span class='line'>drwxr-xr-x 2 root root 4096  2月 11 06:32 roles
</span><span class='line'>drwxr-xr-x 2 root root 4096  2月 11 06:32 site-cookbooks
</span><span class='line'>-rw-r--r-- 1 root root  221  2月 11 06:39 solo.rb</span></code></pre></td></tr></table></div></figure>


<p>作成直後の solo.rb は、各パスが /tmp/chef あたりから始まっているので、作成したディレクトリを参照するように変更しつつ、data_bags 等は Chef Server で利用するよう(?)なので削除していいのかなぁと。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file_cache_path</span>           <span class="s2">&quot;/tmp/chef-solo&quot;</span>
</span><span class='line'><span class="n">cookbook_path</span>             <span class="o">[</span> <span class="ss">File</span><span class="p">:</span><span class="ss">:expand_path</span><span class="p">(</span><span class="s1">&#39;site-cookbooks&#39;</span><span class="p">),</span>
</span><span class='line'>                            <span class="ss">File</span><span class="p">:</span><span class="ss">:expand_path</span><span class="p">(</span><span class="s1">&#39;cookbooks&#39;</span><span class="p">)</span> <span class="o">]</span>
</span><span class='line'><span class="n">role_path</span>                 <span class="ss">File</span><span class="p">:</span><span class="ss">:expand_path</span><span class="p">(</span><span class="s1">&#39;roles&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>cookbook_path といいつつ、Cookbook を複数収容するディレクトリを指定するところが、ミスリードを誘いそう。</p>

<h1>Cookbook を作る</h1>

<p>Cookbook は以下のコマンドで作成。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># knife cookbook create mycookbook -o cookbooks/</span>
</span></code></pre></td></tr></table></div></figure>


<p>cookbooks/ 直下に、複数の Cookbook を並べる感じの模様。</p>

<p>が、site-cookbooks との棲み分けがよくわからない。どこからか入手したものを配置するの？</p>

<p>追記: site-cookbooks に自前のクックブックを配置し、cookbooks 配下には外部から取り込んだものを配置するのが推奨されているようです。</p>

<h1>Role の定義</h1>

<p>例によって JSON で。</p>

<h1>Run-list の定義</h1>

<p>こちらも JSON で。nodes 配下に配置。</p>

<h1>実行</h1>

<p>ノードに対応する .json ファイルと、solo.rb を指定しつつ chef-solo を実行。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">chef</span><span class="o">-</span><span class="n">solo</span> <span class="o">-</span><span class="n">c</span> <span class="o">.</span><span class="n">/solo</span><span class="o">.</span><span class="n">rb</span> <span class="o">-</span><span class="n">j</span> <span class="o">.</span><span class="n">/nodes</span><span class="o">/</span><span class="n">nodename</span><span class="o">.</span><span class="n">json</span>
</span></code></pre></td></tr></table></div></figure>


<p>solo.rb をきちんと相対パスで指定しないと、/etc/chef/solo.rb (?) を探そうとして死んでた。</p>

<p>カレントディレクトリに solo.rb がある場合でも、&#8221; -c solo.rb &#8221; という記述だと NG みたい。</p>

<h1>もやっと</h1>

<p>いざ実際のサーバ用の設定を作ってみると、どのくらいの粒度でレシピを作るべきかとか、配置はどうだとか、Role にするべきか Node にするべきかとか、そこら辺の答えた分からない感じ。</p>

<p>もうちょっと経験をつまないと。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World!]]></title>
    <link href="http://nakanoseiji.github.com/blog/2013/03/10/hello-world/"/>
    <updated>2013-03-10T17:04:00+09:00</updated>
    <id>http://nakanoseiji.github.com/blog/2013/03/10/hello-world</id>
    <content type="html"><![CDATA[<h1>Octopress ではじめてみました</h1>

<p>あんまりブログとかは継続できない人ですが、こういうところがピンときました。</p>

<ul>
<li>ローカルで書いておける</li>
<li>好きなエディタで書ける</li>
</ul>


<p>というわけでこういう感じではじめてみました。</p>

<ul>
<li>ホスティングは github page</li>
<li>エディタは emacs + markdown-mode</li>
<li>バックアップとか下書きは bitbucket の private リポジトリへ git push &#8211;mirror</li>
<li>表示チェックは rake generate したあとに、 python -m SimpleHTTPServer 8000 的な。</li>
</ul>


<p>ちょうどキャリア的に少し方向が変わったので、勉強したことをまとめていければいいかなぁと。</p>
]]></content>
  </entry>
  
</feed>
